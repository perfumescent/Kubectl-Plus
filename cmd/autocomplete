#!/bin/bash

# Get namespaces for completion
function _get_namespaces() {
    # Cache namespaces for 5 seconds to avoid too many API calls
    local cache_file="/tmp/kp_ns_cache"
    local cache_age=5  # seconds

    if [ -f "$cache_file" ]; then
        # Check if cache is still valid
        if [ $(($(date +%s) - $(stat -c %Y "$cache_file"))) -lt $cache_age ]; then
            cat "$cache_file"
            return
        fi
    fi

    # Get fresh namespace list and update cache
    kubectl get ns 2>/dev/null | tail -n +2 | awk '{print $1}' | tee "$cache_file"
}

# Get pods in specified namespace
function _get_pods() {
    local namespace="$1"
    kubectl -n $namespace get pod 2>/dev/null | tail -n +2 | awk '{print $1}'
}

# Get services in specified namespace
function _get_services() {
    local namespace="$1"
    kubectl -n $namespace get svc 2>/dev/null | tail -n +2 | awk '{print $1}'
}

# Get resource types for p command
function _get_resources() {
    echo "pod svc deploy rs sts"
}

# Handle namespace parameter completion
function _handle_namespace_completion() {
    local cur="$1"
    local prev="$2"

    # Case 1: Handle partial parameter input (e.g. -n, --n)
    if [[ "$cur" == -* ]]; then
        if [[ "$cur" == --n* ]]; then
            COMPREPLY=($(compgen -W "--namespace" -- "$cur"))
            return 0
        elif [[ "$cur" == -n* ]]; then
            COMPREPLY=($(compgen -W "-n --namespace" -- "$cur"))
            return 0
        fi
    fi

    # Case 2: Handle namespace completion after parameter
    if [[ "$prev" == "-n" || "$prev" == "--namespace" ]]; then
        local namespaces=$(_get_namespaces)
        if [ -n "$namespaces" ]; then
            COMPREPLY=($(compgen -W "$namespaces" -- "$cur"))
        fi
        return 0
    fi

    return 1
}

# Main completion function for kp command
function _kp_completion() {
    COMPREPLY=()
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    # Complete main command options
    if [[ ${#COMP_WORDS[@]} -eq 2 ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=($(compgen -W "-h --help -v --version" -- "$cur"))
        else
            COMPREPLY=($(compgen -W "l f i p" -- "$cur"))
        fi
        return 0
    fi

    # Get subcommand
    local subcmd="${COMP_WORDS[1]}"

    # Handle subcommand completion
    case "$subcmd" in
        l)
            _kp_completion_l
            ;;
        f)
            _kp_completion_f
            ;;
        i)
            _kp_completion_i
            ;;
        g)
            _kp_completion_g
            ;;
        *)
            COMPREPLY=()
            ;;
    esac
}

# Completion function for l subcommand
function _kp_completion_l() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    # First priority: Handle namespace parameter completion
    if _handle_namespace_completion "$cur" "$prev"; then
        return 0
    fi

    # Second priority: Handle other parameters
    if [[ "$cur" == -* ]]; then
        COMPREPLY=($(compgen -W "-n --namespace -c --container -s --shell -f --follow -t --tail" -- "$cur"))
        return 0
    fi

    # Get current namespace for pod/container completion
    local namespace="dev"  # Default namespace
    for ((i=2; i<${#COMP_WORDS[@]}-1; i++)); do
        if [[ "${COMP_WORDS[i]}" == "-n" || "${COMP_WORDS[i]}" == "--namespace" ]]; then
            namespace="${COMP_WORDS[i+1]}"
            break
        fi
    done

    # Third priority: Handle first argument (pod name)
    if [[ ${#COMP_WORDS[@]} -eq 3 ]]; then
        local pods=$(_get_pods "$namespace")
        if [ -n "$pods" ]; then
            COMPREPLY=($(compgen -W "$pods" -- "$cur"))
        fi
        return 0
    fi

    # Fourth priority: Handle container completion
    if [[ "$prev" == "-c" || "$prev" == "--container" ]]; then
        if [ -n "${COMP_WORDS[2]}" ]; then
            local containers=$(kubectl -n "$namespace" get pod "${COMP_WORDS[2]}" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null)
            COMPREPLY=($(compgen -W "$containers" -- "$cur"))
        fi
        return 0
    fi
}

# Completion function for f subcommand
function _kp_completion_f() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    # First priority: Handle namespace parameter completion
    if _handle_namespace_completion "$cur" "$prev"; then
        return 0
    fi

    # Second priority: Handle other parameters
    if [[ "$cur" == -* ]]; then
        COMPREPLY=($(compgen -W "-n --namespace -c --container -p --path" -- "$cur"))
        return 0
    fi

    # Get current namespace for service completion
    local namespace="dev"  # Default namespace
    for ((i=2; i<${#COMP_WORDS[@]}-1; i++)); do
        if [[ "${COMP_WORDS[i]}" == "-n" || "${COMP_WORDS[i]}" == "--namespace" ]]; then
            namespace="${COMP_WORDS[i+1]}"
            break
        fi
    done

    # Third priority: Handle first argument (service name)
    if [[ ${#COMP_WORDS[@]} -eq 3 ]]; then
        local services=$(_get_services "$namespace")
        if [ -n "$services" ]; then
            COMPREPLY=($(compgen -W "$services" -- "$cur"))
        fi
        return 0
    fi
}

# Completion function for i subcommand
function _kp_completion_i() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    # First priority: Handle namespace parameter completion
    if _handle_namespace_completion "$cur" "$prev"; then
        return 0
    fi

    # Second priority: Handle other parameters
    if [[ "$cur" == -* ]]; then
        COMPREPLY=($(compgen -W "-n --namespace -c --container -s --shell" -- "$cur"))
        return 0
    fi

    # Get current namespace for pod/container completion
    local namespace="dev"  # Default namespace
    for ((i=2; i<${#COMP_WORDS[@]}-1; i++)); do
        if [[ "${COMP_WORDS[i]}" == "-n" || "${COMP_WORDS[i]}" == "--namespace" ]]; then
            namespace="${COMP_WORDS[i+1]}"
            break
        fi
    done

    # Third priority: Handle first argument (pod name)
    if [[ ${#COMP_WORDS[@]} -eq 3 ]]; then
        local pods=$(_get_pods "$namespace")
        if [ -n "$pods" ]; then
            COMPREPLY=($(compgen -W "$pods" -- "$cur"))
        fi
        return 0
    fi

    # Fourth priority: Handle container completion
    if [[ "$prev" == "-c" || "$prev" == "--container" ]]; then
        if [ -n "${COMP_WORDS[2]}" ]; then
            local containers=$(kubectl -n "$namespace" get pod "${COMP_WORDS[2]}" -o jsonpath='{.spec.containers[*].name}' 2>/dev/null)
            COMPREPLY=($(compgen -W "$containers" -- "$cur"))
        fi
        return 0
    fi
}

# Completion function for g subcommand
function _kp_completion_g() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    # First priority: Handle namespace parameter completion
    if _handle_namespace_completion "$cur" "$prev"; then
        return 0
    fi

    # Second priority: Handle resource type completion
    if [[ ${#COMP_WORDS[@]} -eq 3 ]]; then
        if [[ "$cur" == -* ]]; then
            COMPREPLY=($(compgen -W "-n --namespace -w --wide -l --selector -o --output -A --all-namespaces -S --sort" -- "$cur"))
        else
            COMPREPLY=($(compgen -W "$(_get_resources)" -- "$cur"))
        fi
        return 0
    fi

    # Third priority: Handle other parameters
    case "$prev" in
        -o|--output)
            COMPREPLY=($(compgen -W "json yaml wide custom" -- "$cur"))
            return 0
            ;;
        -S|--sort)
            COMPREPLY=($(compgen -W "name status age" -- "$cur"))
            return 0
            ;;
        *)
            if [[ "$cur" == -* ]]; then
                COMPREPLY=($(compgen -W "-n --namespace -w --wide -l --selector -o --output -A --all-namespaces -S --sort" -- "$cur"))
                return 0
            fi
            ;;
    esac
}

# Register completions
complete -F _kp_completion kp

